/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as AuthRouteImport } from "./routes/auth";
import { Route as AuthedRouteImport } from "./routes/_authed";
import { Route as AuthIndexRouteImport } from "./routes/auth/index";
import { Route as AuthedIndexRouteImport } from "./routes/_authed/index";
import { Route as AuthedWarehouseRouteImport } from "./routes/_authed/warehouse";
import { Route as AuthedSeasonsRouteImport } from "./routes/_authed/seasons";
import { Route as AuthedReportsRouteImport } from "./routes/_authed/reports";
import { Route as AuthedOrganizationsRouteImport } from "./routes/_authed/organizations";
import { Route as AuthedNotificationsRouteImport } from "./routes/_authed/notifications";
import { Route as AuthedImportsExportsRouteImport } from "./routes/_authed/imports-exports";
import { Route as AuthedFieldsRouteImport } from "./routes/_authed/fields";
import { Route as AuthedFarmProfileRouteImport } from "./routes/_authed/farm-profile";
import { Route as AuthedDiariesRouteImport } from "./routes/_authed/diaries";
import { Route as AuthedCreditsRouteImport } from "./routes/_authed/credits";
import { Route as AuthedAuditsRouteImport } from "./routes/_authed/audits";
import { Route as AuthedActivitiesRouteImport } from "./routes/_authed/activities";

const AuthRoute = AuthRouteImport.update({
  id: "/auth",
  path: "/auth",
  getParentRoute: () => rootRouteImport,
} as any);
const AuthedRoute = AuthedRouteImport.update({
  id: "/_authed",
  getParentRoute: () => rootRouteImport,
} as any);
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthRoute,
} as any);
const AuthedIndexRoute = AuthedIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedWarehouseRoute = AuthedWarehouseRouteImport.update({
  id: "/warehouse",
  path: "/warehouse",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedSeasonsRoute = AuthedSeasonsRouteImport.update({
  id: "/seasons",
  path: "/seasons",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedReportsRoute = AuthedReportsRouteImport.update({
  id: "/reports",
  path: "/reports",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedOrganizationsRoute = AuthedOrganizationsRouteImport.update({
  id: "/organizations",
  path: "/organizations",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedNotificationsRoute = AuthedNotificationsRouteImport.update({
  id: "/notifications",
  path: "/notifications",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedImportsExportsRoute = AuthedImportsExportsRouteImport.update({
  id: "/imports-exports",
  path: "/imports-exports",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedFieldsRoute = AuthedFieldsRouteImport.update({
  id: "/fields",
  path: "/fields",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedFarmProfileRoute = AuthedFarmProfileRouteImport.update({
  id: "/farm-profile",
  path: "/farm-profile",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedDiariesRoute = AuthedDiariesRouteImport.update({
  id: "/diaries",
  path: "/diaries",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedCreditsRoute = AuthedCreditsRouteImport.update({
  id: "/credits",
  path: "/credits",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedAuditsRoute = AuthedAuditsRouteImport.update({
  id: "/audits",
  path: "/audits",
  getParentRoute: () => AuthedRoute,
} as any);
const AuthedActivitiesRoute = AuthedActivitiesRouteImport.update({
  id: "/activities",
  path: "/activities",
  getParentRoute: () => AuthedRoute,
} as any);

export interface FileRoutesByFullPath {
  "/auth": typeof AuthRouteWithChildren;
  "/activities": typeof AuthedActivitiesRoute;
  "/audits": typeof AuthedAuditsRoute;
  "/credits": typeof AuthedCreditsRoute;
  "/diaries": typeof AuthedDiariesRoute;
  "/farm-profile": typeof AuthedFarmProfileRoute;
  "/fields": typeof AuthedFieldsRoute;
  "/imports-exports": typeof AuthedImportsExportsRoute;
  "/notifications": typeof AuthedNotificationsRoute;
  "/organizations": typeof AuthedOrganizationsRoute;
  "/reports": typeof AuthedReportsRoute;
  "/seasons": typeof AuthedSeasonsRoute;
  "/warehouse": typeof AuthedWarehouseRoute;
  "/": typeof AuthedIndexRoute;
  "/auth/": typeof AuthIndexRoute;
}
export interface FileRoutesByTo {
  "/activities": typeof AuthedActivitiesRoute;
  "/audits": typeof AuthedAuditsRoute;
  "/credits": typeof AuthedCreditsRoute;
  "/diaries": typeof AuthedDiariesRoute;
  "/farm-profile": typeof AuthedFarmProfileRoute;
  "/fields": typeof AuthedFieldsRoute;
  "/imports-exports": typeof AuthedImportsExportsRoute;
  "/notifications": typeof AuthedNotificationsRoute;
  "/organizations": typeof AuthedOrganizationsRoute;
  "/reports": typeof AuthedReportsRoute;
  "/seasons": typeof AuthedSeasonsRoute;
  "/warehouse": typeof AuthedWarehouseRoute;
  "/": typeof AuthedIndexRoute;
  "/auth": typeof AuthIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/_authed": typeof AuthedRouteWithChildren;
  "/auth": typeof AuthRouteWithChildren;
  "/_authed/activities": typeof AuthedActivitiesRoute;
  "/_authed/audits": typeof AuthedAuditsRoute;
  "/_authed/credits": typeof AuthedCreditsRoute;
  "/_authed/diaries": typeof AuthedDiariesRoute;
  "/_authed/farm-profile": typeof AuthedFarmProfileRoute;
  "/_authed/fields": typeof AuthedFieldsRoute;
  "/_authed/imports-exports": typeof AuthedImportsExportsRoute;
  "/_authed/notifications": typeof AuthedNotificationsRoute;
  "/_authed/organizations": typeof AuthedOrganizationsRoute;
  "/_authed/reports": typeof AuthedReportsRoute;
  "/_authed/seasons": typeof AuthedSeasonsRoute;
  "/_authed/warehouse": typeof AuthedWarehouseRoute;
  "/_authed/": typeof AuthedIndexRoute;
  "/auth/": typeof AuthIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/auth"
    | "/activities"
    | "/audits"
    | "/credits"
    | "/diaries"
    | "/farm-profile"
    | "/fields"
    | "/imports-exports"
    | "/notifications"
    | "/organizations"
    | "/reports"
    | "/seasons"
    | "/warehouse"
    | "/"
    | "/auth/";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/activities"
    | "/audits"
    | "/credits"
    | "/diaries"
    | "/farm-profile"
    | "/fields"
    | "/imports-exports"
    | "/notifications"
    | "/organizations"
    | "/reports"
    | "/seasons"
    | "/warehouse"
    | "/"
    | "/auth";
  id:
    | "__root__"
    | "/_authed"
    | "/auth"
    | "/_authed/activities"
    | "/_authed/audits"
    | "/_authed/credits"
    | "/_authed/diaries"
    | "/_authed/farm-profile"
    | "/_authed/fields"
    | "/_authed/imports-exports"
    | "/_authed/notifications"
    | "/_authed/organizations"
    | "/_authed/reports"
    | "/_authed/seasons"
    | "/_authed/warehouse"
    | "/_authed/"
    | "/auth/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren;
  AuthRoute: typeof AuthRouteWithChildren;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/auth": {
      id: "/auth";
      path: "/auth";
      fullPath: "/auth";
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_authed": {
      id: "/_authed";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthedRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/auth/": {
      id: "/auth/";
      path: "/";
      fullPath: "/auth/";
      preLoaderRoute: typeof AuthIndexRouteImport;
      parentRoute: typeof AuthRoute;
    };
    "/_authed/": {
      id: "/_authed/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof AuthedIndexRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/warehouse": {
      id: "/_authed/warehouse";
      path: "/warehouse";
      fullPath: "/warehouse";
      preLoaderRoute: typeof AuthedWarehouseRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/seasons": {
      id: "/_authed/seasons";
      path: "/seasons";
      fullPath: "/seasons";
      preLoaderRoute: typeof AuthedSeasonsRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/reports": {
      id: "/_authed/reports";
      path: "/reports";
      fullPath: "/reports";
      preLoaderRoute: typeof AuthedReportsRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/organizations": {
      id: "/_authed/organizations";
      path: "/organizations";
      fullPath: "/organizations";
      preLoaderRoute: typeof AuthedOrganizationsRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/notifications": {
      id: "/_authed/notifications";
      path: "/notifications";
      fullPath: "/notifications";
      preLoaderRoute: typeof AuthedNotificationsRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/imports-exports": {
      id: "/_authed/imports-exports";
      path: "/imports-exports";
      fullPath: "/imports-exports";
      preLoaderRoute: typeof AuthedImportsExportsRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/fields": {
      id: "/_authed/fields";
      path: "/fields";
      fullPath: "/fields";
      preLoaderRoute: typeof AuthedFieldsRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/farm-profile": {
      id: "/_authed/farm-profile";
      path: "/farm-profile";
      fullPath: "/farm-profile";
      preLoaderRoute: typeof AuthedFarmProfileRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/diaries": {
      id: "/_authed/diaries";
      path: "/diaries";
      fullPath: "/diaries";
      preLoaderRoute: typeof AuthedDiariesRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/credits": {
      id: "/_authed/credits";
      path: "/credits";
      fullPath: "/credits";
      preLoaderRoute: typeof AuthedCreditsRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/audits": {
      id: "/_authed/audits";
      path: "/audits";
      fullPath: "/audits";
      preLoaderRoute: typeof AuthedAuditsRouteImport;
      parentRoute: typeof AuthedRoute;
    };
    "/_authed/activities": {
      id: "/_authed/activities";
      path: "/activities";
      fullPath: "/activities";
      preLoaderRoute: typeof AuthedActivitiesRouteImport;
      parentRoute: typeof AuthedRoute;
    };
  }
}

interface AuthedRouteChildren {
  AuthedActivitiesRoute: typeof AuthedActivitiesRoute;
  AuthedAuditsRoute: typeof AuthedAuditsRoute;
  AuthedCreditsRoute: typeof AuthedCreditsRoute;
  AuthedDiariesRoute: typeof AuthedDiariesRoute;
  AuthedFarmProfileRoute: typeof AuthedFarmProfileRoute;
  AuthedFieldsRoute: typeof AuthedFieldsRoute;
  AuthedImportsExportsRoute: typeof AuthedImportsExportsRoute;
  AuthedNotificationsRoute: typeof AuthedNotificationsRoute;
  AuthedOrganizationsRoute: typeof AuthedOrganizationsRoute;
  AuthedReportsRoute: typeof AuthedReportsRoute;
  AuthedSeasonsRoute: typeof AuthedSeasonsRoute;
  AuthedWarehouseRoute: typeof AuthedWarehouseRoute;
  AuthedIndexRoute: typeof AuthedIndexRoute;
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedActivitiesRoute: AuthedActivitiesRoute,
  AuthedAuditsRoute: AuthedAuditsRoute,
  AuthedCreditsRoute: AuthedCreditsRoute,
  AuthedDiariesRoute: AuthedDiariesRoute,
  AuthedFarmProfileRoute: AuthedFarmProfileRoute,
  AuthedFieldsRoute: AuthedFieldsRoute,
  AuthedImportsExportsRoute: AuthedImportsExportsRoute,
  AuthedNotificationsRoute: AuthedNotificationsRoute,
  AuthedOrganizationsRoute: AuthedOrganizationsRoute,
  AuthedReportsRoute: AuthedReportsRoute,
  AuthedSeasonsRoute: AuthedSeasonsRoute,
  AuthedWarehouseRoute: AuthedWarehouseRoute,
  AuthedIndexRoute: AuthedIndexRoute,
};

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren);

interface AuthRouteChildren {
  AuthIndexRoute: typeof AuthIndexRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIndexRoute: AuthIndexRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
